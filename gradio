from typing import Union
import gradio as gr
from huggingface_hub import InferenceClient, login
import fitz
import io
import re
import logging
from functools import lru_cache
import backoff

# Configuração do Logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuração da API
API_URL = 'https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1'
API_KEY = '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'

login(token=API_KEY)
client = InferenceClient(model="mistralai/Mixtral-8x7B-Instruct-v0.1", token=API_KEY)

@lru_cache(maxsize=100)
@backoff.on_exception(backoff.expo, Exception, max_tries=5, max_time=60)
def get_cached_analysis(prompt: str, max_new_tokens: int = 4000, temperature: float = 0.2) -> str:
    """Obtém a análise de um prompt usando o modelo de IA."""
    response_text = ""
    messages = [{"role": "user", "content": prompt}]
    try:
        for message in client.chat_completion(
                messages=messages, max_tokens=max_new_tokens, temperature=temperature, stream=True):
            if message.choices and message.choices[0].delta and message.choices[0].delta.content:
                response_text += message.choices[0].delta.content
    except Exception as e:
        logger.error(f"Erro durante a geração da análise: {str(e)}")
        return f"Erro durante a geração da análise: {str(e)}"
    return response_text

def extract_text_from_pdf(file: Union[str, io.BytesIO, bytes]) -> str:
    """Extrai texto de um arquivo PDF."""
    try:
        if isinstance(file, str):
            doc = fitz.open(file)
        elif isinstance(file, io.BytesIO):
            doc = fitz.open(stream=file.read(), filetype="pdf")
        elif isinstance(file, bytes):
            doc = fitz.open(stream=file, filetype="pdf")
        else:
            raise ValueError("Formato de arquivo não suportado.")

        text = "".join([page.get_text() for page in doc])
        if not text.strip():
            raise ValueError("O PDF está vazio ou não possui texto extraível.")
        return text
    except Exception as e:
        logger.error(f"Erro ao extrair texto do PDF: {str(e)}")
        return f"Erro ao extrair texto do PDF: {str(e)}"

def preprocess_text(text: str) -> str:
    """Pré-processa o texto para análise."""
    try:
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'(?i)\bhemoglobina\b', 'Hb', text)
        text = re.sub(r'Page \d+ of \d+|\f', '', text)
        text = re.sub(r'[^\w\s.,;:%/\-()]', '', text)
        return text.strip()
    except Exception as e:
        logger.error(f"Erro durante o pré-processamento do texto: {str(e)}")
        return f"Erro durante o pré-processamento do texto: {str(e)}"

def extract_reference_values(exam_text: str) -> dict:
    """Extrai os valores de referência do texto do exame."""
    reference_values = {}
    pattern = re.compile(r'(\w+):\s*([\d.]+)-([\d.]+)\s*mg/dL')
    matches = pattern.findall(exam_text)
    for match in matches:
        test_name = match[0]
        lower_bound = float(match[1])
        upper_bound = float(match[2])
        reference_values[test_name] = (lower_bound, upper_bound)
    return reference_values

def extract_test_results(exam_text: str) -> dict:
    """Extrai os resultados dos testes do texto do exame."""
    test_results = {}
    pattern = re.compile(r'(\w+):\s*([\d.]+)\s*mg/dL')
    matches = pattern.findall(exam_text)
    for match in matches:
        test_name = match[0]
        result_value = float(match[1])
        test_results[test_name] = result_value
    return test_results

def validate_analysis(analysis: str) -> str:
    """Valida a análise retornada pelo modelo."""
    if not analysis.strip():
        return "Erro: A análise retornada pelo modelo está vazia."
    if "Erro" in analysis:
        return analysis
    return analysis

def analyze_blood_test(file: Union[str, io.BytesIO, bytes]) -> str:
    """Analisa um exame de sangue fornecido em PDF ou texto."""
    try:
        if isinstance(file, (str, io.BytesIO, bytes)):
            text = extract_text_from_pdf(file)
        else:
            return "Erro: Formato de arquivo não suportado."

        if not text.strip():
            return "Erro: O arquivo está vazio ou não foi possível extrair texto."

        text = preprocess_text(text)
        reference_values = extract_reference_values(text)
        test_results = extract_test_results(text)

        prompt = f"""
        <s>[INST] Você é um especialista médico analisando um exame de sangue em português.
        Com base nos resultados fornecidos abaixo, forneça uma análise detalhada e precisa.

        Instruções importantes:
        1. Compare cuidadosamente cada valor com sua faixa de referência correspondente, considerando o sexo do paciente quando aplicável.
        2. Identifique apenas as anomalias reais, onde o valor está fora da faixa de referência.
        3. Para cada anomalia encontrada, informe:
           - O nome do exame
           - O valor obtido
           - A faixa de referência específica para o sexo do paciente
           - Se está acima ou abaixo da faixa
           - A classificação da anomalia (leve, moderada ou grave)
        4. Explique as possíveis implicações de cada anomalia para a saúde do paciente.
        5. Não classifique como anomalia valores que estejam dentro da faixa de referência, mesmo que próximos aos limites.
        6. Se não houver anomalias, informe que todos os valores estão dentro das faixas de referência.
        7. Caso faltem informações ou valores de referência, indique claramente.
        8. Sugira possíveis condições de saúde relacionadas às anomalias encontradas, em ordem de probabilidade.
        9. Recomende exames adicionais ou consultas com especialistas, se necessário.
        10. Sugira mudanças no estilo de vida ou dieta, se aplicável.
        11. Forneça uma escala de urgência para procurar atendimento médico (não urgente, pouco urgente, urgente, muito urgente).

        Exame de sangue: 
        {text}

        Sua análise detalhada em português: [/INST]
        """
        analysis = get_cached_analysis(prompt, max_new_tokens=4000, temperature=0.2)
        validated_analysis = validate_analysis(analysis)
        return validated_analysis
    except Exception as e:
        logger.error(f"Erro ao processar o arquivo: {str(e)}")
        return f"Erro ao processar o arquivo: {str(e)}"

iface = gr.Interface(
    fn=analyze_blood_test,
    inputs=[gr.File(label="Envie seu exame de sangue (PDF ou Texto)", type="filepath")],
    outputs=gr.Textbox(label="Análise do Exame", lines=30),
    title="Análise Automatizada de Exame de Sangue",
    allow_flagging="never",
    live=False,
)

def main():
    iface.launch(server_name="0.0.0.0")

if __name__ == "__main__":
    main()
